// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Sybon.Auth;
using Sybon.Auth.Repositories.CollectionPermissionsRepository.Entities;
using Sybon.Auth.Repositories.UsersRepository.Entities;
using System;

namespace Sybon.Auth.Migrations
{
    [DbContext(typeof(AuthContext))]
    [Migration("20171008180620_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Sybon.Auth.Repositories.CollectionPermissionsRepository.Entities.CollectionPermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CollectionId");

                    b.Property<int>("Type");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CollectionPermissions");
                });

            modelBuilder.Entity("Sybon.Auth.Repositories.SubmitLimitsRepository.Entities.SubmitLimit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MinuteLimit");

                    b.Property<int>("MonthLimit");

                    b.Property<int>("SubmitsDuringMonth");

                    b.Property<DateTime>("SubmitsRefreshDate");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("SubmitLimits");
                });

            modelBuilder.Entity("Sybon.Auth.Repositories.TokensRepository.Entities.Token", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ExpireTime");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("Sybon.Auth.Repositories.UsersRepository.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Role");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Sybon.Auth.Repositories.CollectionPermissionsRepository.Entities.CollectionPermission", b =>
                {
                    b.HasOne("Sybon.Auth.Repositories.UsersRepository.Entities.User", "User")
                        .WithMany("ProblemPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sybon.Auth.Repositories.SubmitLimitsRepository.Entities.SubmitLimit", b =>
                {
                    b.HasOne("Sybon.Auth.Repositories.UsersRepository.Entities.User", "User")
                        .WithOne("SubmitLimit")
                        .HasForeignKey("Sybon.Auth.Repositories.SubmitLimitsRepository.Entities.SubmitLimit", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sybon.Auth.Repositories.TokensRepository.Entities.Token", b =>
                {
                    b.HasOne("Sybon.Auth.Repositories.UsersRepository.Entities.User", "User")
                        .WithOne("Token")
                        .HasForeignKey("Sybon.Auth.Repositories.TokensRepository.Entities.Token", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
